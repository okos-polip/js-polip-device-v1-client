(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,(function(r){var n=e[i][1][r];return o(n||r)}),p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){},{}],2:[function(require,module,exports){const axios=require("axios");const{createTimestamp:createTimestamp,createTag:createTag}=require("./util");const{POLIP_DEVICE_INGEST_SERVER_URL_SECURE:POLIP_DEVICE_INGEST_SERVER_URL_SECURE}=require("./const");class PolipDevice{constructor(url=POLIP_DEVICE_INGEST_SERVER_URL_SECURE,value=0,skipTagCheck=false,serial=null,key=null,hardware=null,firmware=null,rollover=null){this.url=url;this.value=value;this.skipTagCheck=skipTagCheck;this.serial=serial;this.key=key;this.hardware=hardware;this.firmware=firmware;this.rollover=rollover}async checkServerStatus(){try{const response=await axios.get(this.url+"/api/v1/");if(response.status!==200){throw new Error("Server returned non-200 status code")}}catch(error){throw new Error("Failed to check server status: "+error.message)}}async getState(state=true,meta=false,sensors=false,rpc=false,manufacturer=false){const params=new URLSearchParams({meta:meta,state:state,sensors:sensors,rpc:rpc,manufacturer:manufacturer}).toString();const res=await this._requestTemplate(this.url+"/api/v1/device/poll?"+params,{});console.log(res);return res}async pushState(stateObj){if(typeof stateObj!=="object"&&stateObj===null){throw new Error("Invalid parameterization: sensor object must be provided")}const res=this._requestTemplate(this.url+"/api/v1/device/push",{state:stateObj});console.log(res);return res}async pushNotification(message){this.pushError(message,0)}async pushError(message,errorCode){message=String(message);errorCode=parseInt(errorCode);const res=await this._requestTemplate(this.url+"/api/v1/device/error",{code:errorCode,message:message});console.log(res);return res}async pushSensors(sensorsObj){if(typeof sensorsObj!=="object"&&sensorsObj===null){throw new Error("Invalid parameterization: sensor object must be provided")}const res=await _requestTemplate(this.url+"/api/v1/device/sense",{sense:sensorsObj});return res}async getValue(){const res=await _requestTemplate(this.url+"/api/v1/device/value",{},true,true);this.value=res.value;console.log(res);return res}async pushRPC(rpcObj){if(rpcObj.uuid===undefined||rpcObj.uuid===null){throw new Error("Invalid parameterization: RPC must have uuid")}else if(rpcObj.result===undefined||rpcObj.result===null){throw new Error("Invalid parameterization: RPC must have result")}const res=await _requestTemplate(this.url+"/api/v1/device/rpc",{rpc:rpcObj});console.log(res);return res}async getSchema(){const res=await this._requestTemplate(this.url+"/api/v1/device/schema",{});console.log(res);return res}async getErrorSemantic(code){let params=code!==undefined?`?code=${code}`:"";const res=await this._requestTemplate(this.url+"/api/v1/device/error/semantic"+params,{});console.log(res);return res}async _requestTemplate(endpoint,reqObj={},skipValue=false,skipTag=false){reqObj.serial=this.serial;reqObj.firmware=this.firmware;reqObj.hardware=this.hardware;reqObj.timestamp=createTimestamp();if(!skipValue){reqObj.value=this.value}if(!skipTag){reqObj.tag="0";if(!this.skipTagCheck){reqObj.tag=await createTag(JSON.stringify(reqObj),this.key)}}const response=await axios.post(endpoint,reqObj);if(response.status!==200){if(response.data==="value invalid"){throw new Error("Value invalid")}else{throw new Error("Server error")}}if(!skipTag&&!this.skipTagCheck){const oldTag=response.data.tag;response.data.tag="0";response.data.tag=await createTag(JSON.stringify(response.data),this.key);if(oldTag!==response.data.tag){throw new Error("Tag match failed")}}if(!skipValue){this.value+=1;if(this.rollover!==null&&this.value>=this.rollover){this.value=0}}return response.data}}module.exports=PolipDevice},{"./const":3,"./util":5,axios:1}],3:[function(require,module,exports){const POLIP_DEVICE_INGEST_SERVER_ADDRESS="api.okospolip.com";const POLIP_DEVICE_INGEST_SERVER_HTTP_PORT=3021;const POLIP_DEVICE_INGEST_SERVER_HTTPS_PORT=3022;const POLIP_DEVICE_INGEST_SERVER_URL=`http://${POLIP_DEVICE_INGEST_SERVER_ADDRESS}:${POLIP_DEVICE_INGEST_SERVER_HTTP_PORT}`;const POLIP_DEVICE_INGEST_SERVER_URL_SECURE=`https://${POLIP_DEVICE_INGEST_SERVER_ADDRESS}:${POLIP_DEVICE_INGEST_SERVER_HTTPS_PORT}`;const POLIP_DEFAULT_POLL_STATE_PERIOD=1e3;const POLIP_DEFAULT_PUSH_SENSE_PERIOD=1e3;const POLIP_AWAIT_SERVER_OK_RECHECK_PERIOD=500;module.exports={POLIP_DEVICE_INGEST_SERVER_ADDRESS:POLIP_DEVICE_INGEST_SERVER_ADDRESS,POLIP_DEVICE_INGEST_SERVER_HTTP_PORT:POLIP_DEVICE_INGEST_SERVER_HTTP_PORT,POLIP_DEVICE_INGEST_SERVER_HTTPS_PORT:POLIP_DEVICE_INGEST_SERVER_HTTPS_PORT,POLIP_DEVICE_INGEST_SERVER_URL:POLIP_DEVICE_INGEST_SERVER_URL,POLIP_DEVICE_INGEST_SERVER_URL_SECURE:POLIP_DEVICE_INGEST_SERVER_URL_SECURE,POLIP_DEFAULT_POLL_STATE_PERIOD:POLIP_DEFAULT_POLL_STATE_PERIOD,POLIP_DEFAULT_PUSH_SENSE_PERIOD:POLIP_DEFAULT_PUSH_SENSE_PERIOD,POLIP_AWAIT_SERVER_OK_RECHECK_PERIOD:POLIP_AWAIT_SERVER_OK_RECHECK_PERIOD}},{}],4:[function(require,module,exports){const constants=require("./const");const utils=require("./util");const PolipDevice=require("./PolipDevice");module.exports={...constants,...utils,PolipDevice:PolipDevice}},{"./PolipDevice":2,"./const":3,"./util":5}],5:[function(require,module,exports){const{POLIP_AWAIT_SERVER_OK_RECHECK_PERIOD:POLIP_AWAIT_SERVER_OK_RECHECK_PERIOD}=require("./const");function formatVersion(major,minor,patch){major=parseInt(major);minor=parseInt(minor);patch=parseInt(patch);return`v${major}.${minor}.${patch}`}function blockAwaitServerOk(device,cb,numRetries){return new Promise(((resolve,reject)=>{console.log("Connecting to Okos Polip Device Ingest Service");let count=0;const _checkServerStatus=async()=>{if(POLIP_OK===await device.checkServerStatus()){console.log("Connected");if(cb){cb()}resolve()}else if(numRetries&&count>=numRetries){reject("Number of retries exceeded")}else{count=count+1;console.log("Failed to connect. Retrying...");setTimeout(_checkServerStatus,POLIP_AWAIT_SERVER_OK_RECHECK_PERIOD)}};_checkServerStatus()}))}function createTimestamp(){return+new Date}async function createTag(payloadStr,clientKey){const enc=new TextEncoder("utf-8");const algorithm={name:"HMAC",hash:"SHA-256"};const key=await crypto.subtle.importKey("raw",enc.encode(clientKey),algorithm,false,["sign","verify"]);const hashBuffer=await crypto.subtle.sign(algorithm.name,key,enc.encode(payloadStr));const hashArray=Array.from(new Uint8Array(hashBuffer));const hashHex=hashArray.map((b=>b.toString(16).padStart(2,"0"))).join("");return hashHex}module.exports={formatVersion:formatVersion,blockAwaitServerOk:blockAwaitServerOk,createTimestamp:createTimestamp,createTag:createTag}},{"./const":3}]},{},[4]);